// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Event defines model for Event.
type Event struct {
	DeviceId *openapi_types.UUID `json:"device_id,omitempty"`
	DeviceOs *string             `json:"device_os,omitempty"`
	Event    *string             `json:"event,omitempty"`
	ParamInt *int                `json:"param_int,omitempty"`
	ParamStr *string             `json:"param_str,omitempty"`
	Sequence *int                `json:"sequence,omitempty"`
	Session  *string             `json:"session,omitempty"`
}

// FailResponse defines model for FailResponse.
type FailResponse struct {
	Error   *string `json:"error,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// AddEventsParams defines parameters for AddEvents.
type AddEventsParams struct {
	// RequestID Correlation-Id
	RequestID *string `json:"Request-ID,omitempty"`
}

// AddEventsJSONRequestBody defines body for AddEvents for application/json ContentType.
type AddEventsJSONRequestBody = Event

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add events
	// (POST /analytics/event/streaming)
	AddEvents(c *gin.Context, params AddEventsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AddEvents operation middleware
func (siw *ServerInterfaceWrapper) AddEvents(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddEventsParams

	headers := c.Request.Header

	// ------------- Optional header parameter "Request-ID" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Request-ID")]; found {
		var RequestID string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Request-ID, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Request-ID", runtime.ParamLocationHeader, valueList[0], &RequestID)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Request-ID: %s", err), http.StatusBadRequest)
			return
		}

		params.RequestID = &RequestID

	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddEvents(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/analytics/event/streaming", wrapper.AddEvents)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUzWojORB+laZ29+bf2Pnrm5M4YPYQNmFPSzByd9lR6Ja0kmxsTEOSyzzGMG/gCZgx",
	"wzjPoH6jodT+iWMfh7k0rfpRfV/VV5pCJFMlBQprIJyCiR4wZf63PUJh6QfHLFUJ0m+MIx5hl8cQQu3o",
	"7PTqvNUqN1tX1+XmReO03DqpXZcb7fP2SfP48uyo3obSOkUaCIHf3AX1RuW4UocSYHE/MKW6xjJtoQSK",
	"aZZ2Odlr65OxGkIwMsWuxTFFGfx/iCJCCOt0MIZLASFMesNbfpa2/p2o8WNv/A9kJVBaKtSWo/kAfwp9",
	"qVNGAIZDHkMJ7EQhFbKaiwHlvkM+3ffiuj17nnckNl4uLA5Qb92e1YHkLbdDuRuye5nZhoDsPWJkKfqa",
	"8eQWjZLC+Pt2m4FaS70zX3Cf3Sx/cjP3w83zl/wp+MsEbkEnOgdu6ebu1c3zJ7d0b24euG9u6Wb5Jzd3",
	"S7dw80NdNMMoQmN2CvVZYnAT25MyQSYOcSATF31ZDM9EmitbDNt98The3SJ/DvJn99W9EfIgf85f3Cx/",
	"ITt93Xe3IFjceoYtwZKJ5VEwQGtRQwlGqFf6qVdqlRpBlgoFUxxCaHgTzcw+eApVtrrAVL0AqsZqZClx",
	"pQZLY/ehtuI4oGBD2qUJMHJ04sLl18ystY8WtYHwv493XEqtMfGJ5Q6plZP1AVnsSQiWErtbEo+x5c4V",
	"bYlf5UNSuS+BLiIvZDyhiEgKu5IzUyrhka9UfTSF1rZX/amxDyH8Ud0+G9XVm1EtHgw/s13wLI4Dy3oJ",
	"BquyUADgGmMIrR5iRoZCqL7NR7Xafh9v/qbhNAvXL0G8syAHgF+wOFj1lEof/8bSHWFRC5YEd6hHqIO2",
	"39bML1SaMj15JywvH8sGJBzYCBTusyzLfgYAAP//dcdlTuEFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
